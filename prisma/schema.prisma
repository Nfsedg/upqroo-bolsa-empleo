datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id              String           @id @default(cuid())
  name            String?
  username        String?          @unique
  email           String?          @unique
  emailVerified   DateTime?
  image           String?
  cvUrl           String? // URL to the user's CV PDF file
  accounts        Account[]
  sessions        Session[]
  role            role?            @relation(fields: [roleId], references: [id])
  vacantes        Vacante[]        @relation("VacanteApplicants")
  applications    Application[]
  surveyResponses SurveyResponse[] @relation("StudentSurveyResponses")
  // Optional for WebAuthn support
  Authenticator   Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  roleId    String?
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String  @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User?   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model role {
  id      String    @id @default(cuid())
  name    String    @unique
  users   User[]
  company company[]
}

// Survey models
model Survey {
  id          String   @id @default(cuid())
  title       String
  description String?
  isActive    Boolean  @default(true)
  startDate   DateTime
  endDate     DateTime

  // Survey questions
  questions SurveyQuestion[]
  responses SurveyResponse[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SurveyQuestion {
  id         String  @id @default(cuid())
  surveyId   String
  question   String
  order      Int // Order of the question in the survey
  isRequired Boolean @default(true)

  survey  Survey         @relation(fields: [surveyId], references: [id], onDelete: Cascade)
  answers SurveyAnswer[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([surveyId])
}

model SurveyResponse {
  id          String  @id @default(cuid())
  surveyId    String
  companyId   String
  studentId   String // The student being evaluated
  isCompleted Boolean @default(false)
  comments    String? // Optional final comments

  survey  Survey         @relation(fields: [surveyId], references: [id], onDelete: Cascade)
  company company        @relation(fields: [companyId], references: [id], onDelete: Cascade)
  student User           @relation("StudentSurveyResponses", fields: [studentId], references: [id], onDelete: Cascade)
  answers SurveyAnswer[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([surveyId, companyId, studentId]) // One response per company per student per survey
  @@index([surveyId])
  @@index([companyId])
  @@index([studentId])
}

model SurveyAnswer {
  id         String @id @default(cuid())
  responseId String
  questionId String
  rating     Int // 0-5 rating (6=No aplica, 5=Muy Bien, 4=Bien, 3=Regular, 2=Mal, 1=PÃ©simo, 0=No aplica)

  response SurveyResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)
  question SurveyQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([responseId, questionId]) // One answer per question per response
  @@index([responseId])
  @@index([questionId])
}
